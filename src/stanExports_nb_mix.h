// Generated by rstantools.  Do not edit by hand.

/*
    test is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    test is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with test.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#ifndef USE_STANC3
#define USE_STANC3
#endif
#include <rstan/rstaninc.hpp>
// Code generated by stanc v2.32.2
#include <stan/model/model_header.hpp>
namespace model_nb_mix_namespace {
using stan::model::model_base_crtp;
using namespace stan::math;
stan::math::profile_map profiles__;
static constexpr std::array<const char*, 22> locations_array__ =
  {" (found before start of program)",
  " (in 'nb_mix', line 22, column 2 to column 48)",
  " (in 'nb_mix', line 23, column 2 to column 46)",
  " (in 'nb_mix', line 24, column 2 to column 44)",
  " (in 'nb_mix', line 27, column 2 to column 42)",
  " (in 'nb_mix', line 28, column 2 to column 41)",
  " (in 'nb_mix', line 29, column 2 to column 47)",
  " (in 'nb_mix', line 30, column 2 to column 60)",
  " (in 'nb_mix', line 31, column 2 to line 33, column 66)",
  " (in 'nb_mix', line 9, column 2 to column 28)",
  " (in 'nb_mix', line 10, column 2 to column 28)",
  " (in 'nb_mix', line 11, column 28 to column 30)",
  " (in 'nb_mix', line 11, column 2 to column 32)",
  " (in 'nb_mix', line 12, column 28 to column 30)",
  " (in 'nb_mix', line 12, column 2 to column 32)",
  " (in 'nb_mix', line 13, column 2 to column 32)",
  " (in 'nb_mix', line 14, column 2 to column 35)",
  " (in 'nb_mix', line 15, column 2 to column 32)",
  " (in 'nb_mix', line 16, column 2 to column 36)",
  " (in 'nb_mix', line 17, column 2 to column 33)",
  " (in 'nb_mix', line 18, column 2 to column 32)",
  " (in 'nb_mix', line 19, column 2 to column 31)"};
#include <stan_meta_header.hpp>
class model_nb_mix final : public model_base_crtp<model_nb_mix> {
private:
  int N0;
  int N1;
  std::vector<int> Y0;
  std::vector<int> Y1;
  double WEIGHT;
  double THETA_EXT;
  double SE_EXT;
  double THETA_WEAK;
  double SE_WEAK;
  Eigen::Matrix<double,-1,1> PRI_MU_data__;
  Eigen::Matrix<double,-1,1> PRI_K_data__;
  Eigen::Map<Eigen::Matrix<double,-1,1>> PRI_MU{nullptr, 0};
  Eigen::Map<Eigen::Matrix<double,-1,1>> PRI_K{nullptr, 0};
public:
  ~model_nb_mix() {}
  model_nb_mix(stan::io::var_context& context__, unsigned int
               random_seed__ = 0, std::ostream* pstream__ = nullptr)
      : model_base_crtp(0) {
    int current_statement__ = 0;
    using local_scalar_t__ = double;
    boost::ecuyer1988 base_rng__ =
      stan::services::util::create_rng(random_seed__, 0);
    // suppress unused var warning
    (void) base_rng__;
    static constexpr const char* function__ =
      "model_nb_mix_namespace::model_nb_mix";
    // suppress unused var warning
    (void) function__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      current_statement__ = 9;
      context__.validate_dims("data initialization", "N0", "int",
        std::vector<size_t>{});
      N0 = std::numeric_limits<int>::min();
      current_statement__ = 9;
      N0 = context__.vals_i("N0")[(1 - 1)];
      current_statement__ = 9;
      stan::math::check_greater_or_equal(function__, "N0", N0, 0);
      current_statement__ = 10;
      context__.validate_dims("data initialization", "N1", "int",
        std::vector<size_t>{});
      N1 = std::numeric_limits<int>::min();
      current_statement__ = 10;
      N1 = context__.vals_i("N1")[(1 - 1)];
      current_statement__ = 10;
      stan::math::check_greater_or_equal(function__, "N1", N1, 0);
      current_statement__ = 11;
      stan::math::validate_non_negative_index("Y0", "N0", N0);
      current_statement__ = 12;
      context__.validate_dims("data initialization", "Y0", "int",
        std::vector<size_t>{static_cast<size_t>(N0)});
      Y0 = std::vector<int>(N0, std::numeric_limits<int>::min());
      current_statement__ = 12;
      Y0 = context__.vals_i("Y0");
      current_statement__ = 12;
      stan::math::check_greater_or_equal(function__, "Y0", Y0, 0);
      current_statement__ = 13;
      stan::math::validate_non_negative_index("Y1", "N0", N0);
      current_statement__ = 14;
      context__.validate_dims("data initialization", "Y1", "int",
        std::vector<size_t>{static_cast<size_t>(N0)});
      Y1 = std::vector<int>(N0, std::numeric_limits<int>::min());
      current_statement__ = 14;
      Y1 = context__.vals_i("Y1");
      current_statement__ = 14;
      stan::math::check_greater_or_equal(function__, "Y1", Y1, 0);
      current_statement__ = 15;
      context__.validate_dims("data initialization", "WEIGHT", "double",
        std::vector<size_t>{});
      WEIGHT = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 15;
      WEIGHT = context__.vals_r("WEIGHT")[(1 - 1)];
      current_statement__ = 15;
      stan::math::check_greater_or_equal(function__, "WEIGHT", WEIGHT, 0);
      current_statement__ = 15;
      stan::math::check_less_or_equal(function__, "WEIGHT", WEIGHT, 1);
      current_statement__ = 16;
      context__.validate_dims("data initialization", "THETA_EXT", "double",
        std::vector<size_t>{});
      THETA_EXT = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 16;
      THETA_EXT = context__.vals_r("THETA_EXT")[(1 - 1)];
      current_statement__ = 17;
      context__.validate_dims("data initialization", "SE_EXT", "double",
        std::vector<size_t>{});
      SE_EXT = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 17;
      SE_EXT = context__.vals_r("SE_EXT")[(1 - 1)];
      current_statement__ = 17;
      stan::math::check_greater_or_equal(function__, "SE_EXT", SE_EXT, 0);
      current_statement__ = 18;
      context__.validate_dims("data initialization", "THETA_WEAK", "double",
        std::vector<size_t>{});
      THETA_WEAK = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 18;
      THETA_WEAK = context__.vals_r("THETA_WEAK")[(1 - 1)];
      current_statement__ = 19;
      context__.validate_dims("data initialization", "SE_WEAK", "double",
        std::vector<size_t>{});
      SE_WEAK = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 19;
      SE_WEAK = context__.vals_r("SE_WEAK")[(1 - 1)];
      current_statement__ = 19;
      stan::math::check_greater_or_equal(function__, "SE_WEAK", SE_WEAK, 0);
      current_statement__ = 20;
      context__.validate_dims("data initialization", "PRI_MU", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      PRI_MU_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                        std::numeric_limits<double>::quiet_NaN());
      new (&PRI_MU)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(PRI_MU_data__.data(), 2);
      {
        std::vector<local_scalar_t__> PRI_MU_flat__;
        current_statement__ = 20;
        PRI_MU_flat__ = context__.vals_r("PRI_MU");
        current_statement__ = 20;
        pos__ = 1;
        current_statement__ = 20;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 20;
          stan::model::assign(PRI_MU, PRI_MU_flat__[(pos__ - 1)],
            "assigning variable PRI_MU", stan::model::index_uni(sym1__));
          current_statement__ = 20;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 20;
      stan::math::check_greater_or_equal(function__, "PRI_MU", PRI_MU, 0);
      current_statement__ = 21;
      context__.validate_dims("data initialization", "PRI_K", "double",
        std::vector<size_t>{static_cast<size_t>(2)});
      PRI_K_data__ = Eigen::Matrix<double,-1,1>::Constant(2,
                       std::numeric_limits<double>::quiet_NaN());
      new (&PRI_K)
        Eigen::Map<Eigen::Matrix<double,-1,1>>(PRI_K_data__.data(), 2);
      {
        std::vector<local_scalar_t__> PRI_K_flat__;
        current_statement__ = 21;
        PRI_K_flat__ = context__.vals_r("PRI_K");
        current_statement__ = 21;
        pos__ = 1;
        current_statement__ = 21;
        for (int sym1__ = 1; sym1__ <= 2; ++sym1__) {
          current_statement__ = 21;
          stan::model::assign(PRI_K, PRI_K_flat__[(pos__ - 1)],
            "assigning variable PRI_K", stan::model::index_uni(sym1__));
          current_statement__ = 21;
          pos__ = (pos__ + 1);
        }
      }
      current_statement__ = 21;
      stan::math::check_greater_or_equal(function__, "PRI_K", PRI_K, 0);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    num_params_r__ = 1 + 1 + 1;
  }
  inline std::string model_name() const final {
    return "model_nb_mix";
  }
  inline std::vector<std::string> model_compile_info() const noexcept {
    return std::vector<std::string>{"stanc_version = stanc3 v2.32.2",
             "stancflags = --allow-undefined"};
  }
  template <bool propto__, bool jacobian__, typename VecR, typename VecI,
            stan::require_vector_like_t<VecR>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline stan::scalar_type_t<VecR>
  log_prob_impl(VecR& params_r__, VecI& params_i__, std::ostream*
                pstream__ = nullptr) const {
    using T__ = stan::scalar_type_t<VecR>;
    using local_scalar_t__ = T__;
    T__ lp__(0.0);
    stan::math::accumulator<T__> lp_accum__;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    static constexpr const char* function__ =
      "model_nb_mix_namespace::log_prob";
    // suppress unused var warning
    (void) function__;
    try {
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = in__.template read<local_scalar_t__>();
      local_scalar_t__ mu0 = DUMMY_VAR__;
      current_statement__ = 2;
      mu0 = in__.template read_constrain_lub<local_scalar_t__,
              jacobian__>(stan::model::rvalue(PRI_MU, "PRI_MU",
                            stan::model::index_uni(1)),
              stan::model::rvalue(PRI_MU, "PRI_MU", stan::model::index_uni(2)),
              lp__);
      local_scalar_t__ k = DUMMY_VAR__;
      current_statement__ = 3;
      k = in__.template read_constrain_lub<local_scalar_t__,
            jacobian__>(stan::model::rvalue(PRI_K, "PRI_K",
                          stan::model::index_uni(1)),
            stan::model::rvalue(PRI_K, "PRI_K", stan::model::index_uni(2)),
            lp__);
      {
        current_statement__ = 4;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(mu0,
                         stan::model::rvalue(PRI_MU, "PRI_MU",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(PRI_MU, "PRI_MU",
                           stan::model::index_uni(2))));
        current_statement__ = 5;
        lp_accum__.add(stan::math::uniform_lpdf<propto__>(k,
                         stan::model::rvalue(PRI_K, "PRI_K",
                           stan::model::index_uni(1)),
                         stan::model::rvalue(PRI_K, "PRI_K",
                           stan::model::index_uni(2))));
        current_statement__ = 6;
        lp_accum__.add(stan::math::neg_binomial_lpmf<false>(Y0, k, (k / mu0)));
        current_statement__ = 7;
        lp_accum__.add(stan::math::neg_binomial_lpmf<false>(Y1, k, ((k / mu0)
                         / stan::math::exp(theta))));
        current_statement__ = 8;
        lp_accum__.add(stan::math::log(((WEIGHT *
                         stan::math::exp(
                           stan::math::normal_lpdf<false>(theta, THETA_EXT,
                             SE_EXT))) + ((1 - WEIGHT) *
                         stan::math::exp(
                           stan::math::normal_lpdf<false>(theta, THETA_WEAK,
                             SE_WEAK))))));
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
    lp_accum__.add(lp__);
    return lp_accum__.sum();
  }
  template <typename RNG, typename VecR, typename VecI, typename VecVar,
            stan::require_vector_like_vt<std::is_floating_point,
            VecR>* = nullptr, stan::require_vector_like_vt<std::is_integral,
            VecI>* = nullptr, stan::require_vector_vt<std::is_floating_point,
            VecVar>* = nullptr>
  inline void
  write_array_impl(RNG& base_rng__, VecR& params_r__, VecI& params_i__,
                   VecVar& vars__, const bool
                   emit_transformed_parameters__ = true, const bool
                   emit_generated_quantities__ = true, std::ostream*
                   pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    static constexpr bool propto__ = true;
    // suppress unused var warning
    (void) propto__;
    double lp__ = 0.0;
    // suppress unused var warning
    (void) lp__;
    int current_statement__ = 0;
    stan::math::accumulator<double> lp_accum__;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    constexpr bool jacobian__ = false;
    static constexpr const char* function__ =
      "model_nb_mix_namespace::write_array";
    // suppress unused var warning
    (void) function__;
    try {
      double theta = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 1;
      theta = in__.template read<local_scalar_t__>();
      double mu0 = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 2;
      mu0 = in__.template read_constrain_lub<local_scalar_t__,
              jacobian__>(stan::model::rvalue(PRI_MU, "PRI_MU",
                            stan::model::index_uni(1)),
              stan::model::rvalue(PRI_MU, "PRI_MU", stan::model::index_uni(2)),
              lp__);
      double k = std::numeric_limits<double>::quiet_NaN();
      current_statement__ = 3;
      k = in__.template read_constrain_lub<local_scalar_t__,
            jacobian__>(stan::model::rvalue(PRI_K, "PRI_K",
                          stan::model::index_uni(1)),
            stan::model::rvalue(PRI_K, "PRI_K", stan::model::index_uni(2)),
            lp__);
      out__.write(theta);
      out__.write(mu0);
      out__.write(k);
      if (stan::math::logical_negation(
            (stan::math::primitive_value(emit_transformed_parameters__) ||
            stan::math::primitive_value(emit_generated_quantities__)))) {
        return ;
      }
      if (stan::math::logical_negation(emit_generated_quantities__)) {
        return ;
      }
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, typename VecI,
            stan::require_vector_t<VecVar>* = nullptr,
            stan::require_vector_like_vt<std::is_integral, VecI>* = nullptr>
  inline void
  unconstrain_array_impl(const VecVar& params_r__, const VecI& params_i__,
                         VecVar& vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::deserializer<local_scalar_t__> in__(params_r__, params_i__);
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = in__.read<local_scalar_t__>();
      out__.write(theta);
      local_scalar_t__ mu0 = DUMMY_VAR__;
      current_statement__ = 2;
      mu0 = in__.read<local_scalar_t__>();
      out__.write_free_lub(stan::model::rvalue(PRI_MU, "PRI_MU",
                             stan::model::index_uni(1)),
        stan::model::rvalue(PRI_MU, "PRI_MU", stan::model::index_uni(2)),
        mu0);
      local_scalar_t__ k = DUMMY_VAR__;
      current_statement__ = 3;
      k = in__.read<local_scalar_t__>();
      out__.write_free_lub(stan::model::rvalue(PRI_K, "PRI_K",
                             stan::model::index_uni(1)),
        stan::model::rvalue(PRI_K, "PRI_K", stan::model::index_uni(2)), k);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  template <typename VecVar, stan::require_vector_t<VecVar>* = nullptr>
  inline void
  transform_inits_impl(const stan::io::var_context& context__, VecVar&
                       vars__, std::ostream* pstream__ = nullptr) const {
    using local_scalar_t__ = double;
    stan::io::serializer<local_scalar_t__> out__(vars__);
    int current_statement__ = 0;
    local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
    // suppress unused var warning
    (void) DUMMY_VAR__;
    try {
      current_statement__ = 1;
      context__.validate_dims("parameter initialization", "theta", "double",
        std::vector<size_t>{});
      current_statement__ = 2;
      context__.validate_dims("parameter initialization", "mu0", "double",
        std::vector<size_t>{});
      current_statement__ = 3;
      context__.validate_dims("parameter initialization", "k", "double",
        std::vector<size_t>{});
      int pos__ = std::numeric_limits<int>::min();
      pos__ = 1;
      local_scalar_t__ theta = DUMMY_VAR__;
      current_statement__ = 1;
      theta = context__.vals_r("theta")[(1 - 1)];
      out__.write(theta);
      local_scalar_t__ mu0 = DUMMY_VAR__;
      current_statement__ = 2;
      mu0 = context__.vals_r("mu0")[(1 - 1)];
      out__.write_free_lub(stan::model::rvalue(PRI_MU, "PRI_MU",
                             stan::model::index_uni(1)),
        stan::model::rvalue(PRI_MU, "PRI_MU", stan::model::index_uni(2)),
        mu0);
      local_scalar_t__ k = DUMMY_VAR__;
      current_statement__ = 3;
      k = context__.vals_r("k")[(1 - 1)];
      out__.write_free_lub(stan::model::rvalue(PRI_K, "PRI_K",
                             stan::model::index_uni(1)),
        stan::model::rvalue(PRI_K, "PRI_K", stan::model::index_uni(2)), k);
    } catch (const std::exception& e) {
      stan::lang::rethrow_located(e, locations_array__[current_statement__]);
    }
  }
  inline void
  get_param_names(std::vector<std::string>& names__, const bool
                  emit_transformed_parameters__ = true, const bool
                  emit_generated_quantities__ = true) const {
    names__ = std::vector<std::string>{"theta", "mu0", "k"};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  get_dims(std::vector<std::vector<size_t>>& dimss__, const bool
           emit_transformed_parameters__ = true, const bool
           emit_generated_quantities__ = true) const {
    dimss__ = std::vector<std::vector<size_t>>{std::vector<size_t>{},
                std::vector<size_t>{}, std::vector<size_t>{}};
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  constrained_param_names(std::vector<std::string>& param_names__, bool
                          emit_transformed_parameters__ = true, bool
                          emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "mu0");
    param_names__.emplace_back(std::string() + "k");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline void
  unconstrained_param_names(std::vector<std::string>& param_names__, bool
                            emit_transformed_parameters__ = true, bool
                            emit_generated_quantities__ = true) const final {
    param_names__.emplace_back(std::string() + "theta");
    param_names__.emplace_back(std::string() + "mu0");
    param_names__.emplace_back(std::string() + "k");
    if (emit_transformed_parameters__) {}
    if (emit_generated_quantities__) {}
  }
  inline std::string get_constrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  inline std::string get_unconstrained_sizedtypes() const {
    return std::string("[{\"name\":\"theta\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"mu0\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"},{\"name\":\"k\",\"type\":{\"name\":\"real\"},\"block\":\"parameters\"}]");
  }
  // Begin method overload boilerplate
  template <typename RNG> inline void
  write_array(RNG& base_rng, Eigen::Matrix<double,-1,1>& params_r,
              Eigen::Matrix<double,-1,1>& vars, const bool
              emit_transformed_parameters = true, const bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    std::vector<int> params_i;
    vars = Eigen::Matrix<double,-1,1>::Constant(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <typename RNG> inline void
  write_array(RNG& base_rng, std::vector<double>& params_r, std::vector<int>&
              params_i, std::vector<double>& vars, bool
              emit_transformed_parameters = true, bool
              emit_generated_quantities = true, std::ostream*
              pstream = nullptr) const {
    const size_t num_params__ = ((1 + 1) + 1);
    const size_t num_transformed = emit_transformed_parameters * (0);
    const size_t num_gen_quantities = emit_generated_quantities * (0);
    const size_t num_to_write = num_params__ + num_transformed +
      num_gen_quantities;
    vars = std::vector<double>(num_to_write,
             std::numeric_limits<double>::quiet_NaN());
    write_array_impl(base_rng, params_r, params_i, vars,
      emit_transformed_parameters, emit_generated_quantities, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(Eigen::Matrix<T_,-1,1>& params_r, std::ostream* pstream = nullptr) const {
    Eigen::Matrix<int,-1,1> params_i;
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  template <bool propto__, bool jacobian__, typename T_> inline T_
  log_prob(std::vector<T_>& params_r, std::vector<int>& params_i,
           std::ostream* pstream = nullptr) const {
    return log_prob_impl<propto__, jacobian__>(params_r, params_i, pstream);
  }
  inline void
  transform_inits(const stan::io::var_context& context,
                  Eigen::Matrix<double,-1,1>& params_r, std::ostream*
                  pstream = nullptr) const final {
    std::vector<double> params_r_vec(params_r.size());
    std::vector<int> params_i;
    transform_inits(context, params_i, params_r_vec, pstream);
    params_r = Eigen::Map<Eigen::Matrix<double,-1,1>>(params_r_vec.data(),
                 params_r_vec.size());
  }
  inline void
  transform_inits(const stan::io::var_context& context, std::vector<int>&
                  params_i, std::vector<double>& vars, std::ostream*
                  pstream__ = nullptr) const {
    vars.resize(num_params_r__);
    transform_inits_impl(context, vars, pstream__);
  }
  inline void
  unconstrain_array(const std::vector<double>& params_constrained,
                    std::vector<double>& params_unconstrained, std::ostream*
                    pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = std::vector<double>(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
  inline void
  unconstrain_array(const Eigen::Matrix<double,-1,1>& params_constrained,
                    Eigen::Matrix<double,-1,1>& params_unconstrained,
                    std::ostream* pstream = nullptr) const {
    const std::vector<int> params_i;
    params_unconstrained = Eigen::Matrix<double,-1,1>::Constant(num_params_r__,
                             std::numeric_limits<double>::quiet_NaN());
    unconstrain_array_impl(params_constrained, params_i,
      params_unconstrained, pstream);
  }
};
}
using stan_model = model_nb_mix_namespace::model_nb_mix;
#ifndef USING_R
// Boilerplate
stan::model::model_base&
new_model(stan::io::var_context& data_context, unsigned int seed,
          std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
stan::math::profile_map& get_stan_profile_data() {
  return model_nb_mix_namespace::profiles__;
}
#endif
#endif
